.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Archive::Cabinet 3"
.TH Archive::Cabinet 3 "2005-05-06" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Archive::Cabinet;
.Ve
.PP
.Vb 8
\&  my $cab = Archive::Cabinet->new("mycab.cab") or die "Couldn't open CAB.\en";
\&  my $href = $cab->get_file_attributes;
\&  foreach my $filename ( keys %{ $href } ) {
\&    print "$filename size: ", $href->{$filename}->{size}, "\en";
\&    my $buffer=$cab->extract($filename);
\&    # Do something interesting with $buffer here.
\&  }
\&  $cab->close; # Highly recommended.
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Archive::Cabinet is a Perl interface to Stuart Caie's current implementation of
\&\f(CW\*(C`libmspack\*(C'\fR, a C library which (currently only) unpacks Microsoft Cabinet or
\&\*(L"\s-1CAB\s0\*(R" files.  libmspack can extract CABs even when they're embedded inside
other \s-1MS\s0 filetypes such as \*(L"\s-1EXE\s0\*(R", \*(L"\s-1DLL\s0\*(R" and others.
.PP
Note: \f(CW\*(C`libmspack\*(C'\fR does \s-1NOT\s0 unpack InstallShield \s-1CAB\s0 files, and so neither
does this Perl module. InstallShield CABs use a different 
encoding/compression algorithm than Microsoft's \s-1CAB\s0 formats.
.Sh "Methods"
.IX Subsection "Methods"
.ie n .IP """new([cabfile])""" 4
.el .IP "\f(CWnew([cabfile])\fR" 4
.IX Item "new([cabfile])"
Method constructor. Optionally takes the name of a cabfile to \fIopen()\fR. 
.ie n .IP """open(cabfile)""" 4
.el .IP "\f(CWopen(cabfile)\fR" 4
.IX Item "open(cabfile)"
Searches the specified cabfile for \s-1CAB\s0 formatted data. The \s-1CAB\s0 may be embedded
within some other file. Returns an opened cab object on success, otherwise, 
returns undef.
.ie n .IP """close""" 4
.el .IP "\f(CWclose\fR" 4
.IX Item "close"
Method destructor. Frees all allocated memory structures. 
.Sp
It is \fBhighly recommended\fR that you explicitly close any open CABs when you 
are finished processing them. Do not depend on your variables falling out 
of scope to free memory (although this usually works anyway.) 
.ie n .IP """list_files""" 4
.el .IP "\f(CWlist_files\fR" 4
.IX Item "list_files"
Returns an array of file names inside an opened \s-1CAB\s0 file.
.ie n .IP """get_file_attributes""" 4
.el .IP "\f(CWget_file_attributes\fR" 4
.IX Item "get_file_attributes"
Returns a hashref to a hash of hashes. The top hash is organized with 
keys of the filenames contained within the open \s-1CAB\s0. The corresponding 
values to the filename keys are anonymous hashes with keys of:
.Sp
.Vb 3
\&  * date (value is a scalar string; format: MM-DD-YYYY, zero padded)
\&  * time (value is a scalar string; format: HH:MM:SS, zero padded)
\&  * size (value is a scalar integer)
.Ve
.Sp
which reflect the creation date, creation time, and size of the 
uncompressed data.  
.ie n .IP """extract(filename)""" 4
.el .IP "\f(CWextract(filename)\fR" 4
.IX Item "extract(filename)"
On success, returns a scalar with the contents of the specified filename, 
otherwise it returns undef on error conditions.
.ie n .IP """extract_all""" 4
.el .IP "\f(CWextract_all\fR" 4
.IX Item "extract_all"
Writes all files in the \s-1CAB\s0 to their specified filenames to the current
working directory. Returns 1 if successful, otherwise 0.
.ie n .IP """extract_to_file(filename, target)""" 4
.el .IP "\f(CWextract_to_file(filename, target)\fR" 4
.IX Item "extract_to_file(filename, target)"
Writes the contents of the filename specified to the target file. Returns
1 if successful, otherwise 0.
.SH "NOTES"
.IX Header "NOTES"
You'll need to download, compile and install \f(CW\*(C`libmspack\*(C'\fR to use this
module (because it implements all the heavy lifting.) You can get a copy 
of library source code by visiting the \s-1URL\s0 below.
.PP
This module expects to link against \f(CW\*(C`libmspack\*(C'\fR, which is installed 
by the distribution tarball in /usr/local/bin.  This path may or may not 
be in your ldconfig path. If not, you will probably have to add that path
to your system's ld.so.conf file.
.PP
We've only used and tested this module on 32 bit Intel Linux. 
.SH "SEE ALSO"
.IX Header "SEE ALSO"
libmspack <http://www.kyz.uklinux.net/libmspack/>
.SH "AUTHOR"
.IX Header "AUTHOR"
Brad Douglas, <rez@touchofmadness.com>
.PP
Mark Allen, <mrallen1@yahoo.com>
.SH "VERSION"
.IX Header "VERSION"
Version 1.10
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2005 by Brad Douglas
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
